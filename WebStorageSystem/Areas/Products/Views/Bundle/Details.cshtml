@model BundleModel

@{
    ViewData["Title"] = "Details " + Model.InventoryNumber;
}

<h1>Details</h1>

<div>
    <h4>Bundle</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            Name
        </dt>
        <dd class="col-sm-10">
            @Model.Name
        </dd>
        <dt class="col-sm-2">
            Inventory Number
        </dt>
        <dd class="col-sm-10">
            @Model.InventoryNumber
        </dd>
        <dt class="col-sm-2">
            Location
        </dt>
        <dd class="col-sm-10">
            @Model.Location.Name (@Model.Location.LocationType.Name)
        </dd>
        <dt class="col-sm-2">
            Default Location
        </dt>
        <dd class="col-sm-10">
            @Model.DefaultLocation.Name (@Model.DefaultLocation.LocationType.Name)
        </dd>
        <dt class="col-sm-2">
            Bar Code
        </dt>
        <dd class="col-sm-10">
            <img src="data:image/png;base64, @Model.BarCode" alt="Barcode" />
        </dd>
        <dt class="col-sm-2">
            Included Units
        </dt>
        <dd class="col-sm-10">
            @foreach (var unit in Model.BundledUnits)
            {
                <p><a href=@Url.Action("Details", "Unit", new {Id = unit.Id})>@unit.InventoryNumber</a> - @unit.Product.Name (@unit.Product.ProductType.Name) - @unit.Location.Name</p>
            }
        </dd>
        <dt class="col-sm-2">
            Has Defect
        </dt>
        <dd class="col-sm-10">
            @Model.HasDefect
        </dd>
        <dt class="col-sm-2">
            Created Date
        </dt>
        <dd id="ddCD" class="col-sm-10">            
            <script type="text/javascript">
                window.addEventListener('load', function() {
                    let data = '@Model.CreatedDate.ToString("s")';
                    let date = luxon.DateTime.fromISO(data, { zone: "utc" }).toLocal().toFormat("dd.LL.yyyy TT");
                    document.getElementById("ddCD").innerHTML = date;
                });
            </script>
        </dd>
        <dt class="col-sm-2">
            Last Modified
        </dt>
        <dd id="ddMD" class="col-sm-10">
            <script type="text/javascript">
                window.addEventListener('load', function() {
                    let data = '@Model.ModifiedDate.ToString("s")';
                    let date = luxon.DateTime.fromISO(data, { zone: "utc" }).toLocal().toFormat("dd.LL.yyyy TT");
                    document.getElementById("ddMD").innerHTML = date;
                });
            </script>
        </dd>
        <dt class="col-sm-2">
            Deleted
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.IsDeleted)
        </dd>
    </dl>
</div>
<div>
    <a class="text-primary" asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    @if (!Model.IsDeleted)
    {
        <a href="#" class="text-primary" data-toggle="modal" data-target="#deleteRestoreModal" data-url="@Url.Action("Delete", new {Id = Model.Id})" data-name="@Model.Name">
            Delete
        </a>
    }
    @if (Model.IsDeleted)
    {
        <a href="#" class="text-primary" data-toggle="modal" data-target="#deleteRestoreModal" data-url="@Url.Action("Restore", new {Id = Model.Id})" data-name="@Model.Name">
            Restore
        </a>
    }
    | <a class="text-primary" asp-action="Index">Back to List</a>
</div>

<partial name="DeleteRestoreModal" />
@if (TempData["Error"] != null)
{
    await Html.RenderPartialAsync("ErrorModal", TempData["Error"]);
}
